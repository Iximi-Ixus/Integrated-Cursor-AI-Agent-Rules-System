---
description: 
globs: 
alwaysApply: true
---
# ‚úÖ 032-cursor_quality_rules - Quality Assurance Rules

## CUSTOMIZATION GUIDE
**Purpose**: Template this file for your project by replacing placeholders with project-specific values
**Technology Templates**: Examples provided for Python, JavaScript, TypeScript, Go, and Rust projects
**Quality Tools**: Adapt command examples to your project's quality toolchain
**Placeholders to Replace**: [PROJECT_NAME], [TECH_STACK], [QUALITY_COMMANDS], [MAIN_LANGUAGE]

## CRITICAL AGENT RULES - READ FIRST

‚ö†Ô∏è **MANDATORY QUALITY ASSURANCE RULES** ‚ö†Ô∏è

1. **NO BREAKING CHANGES**: Agents MUST NOT modify working code without user approval for quality improvements
2. **VALIDATION FIRST**: Always run quality checks before suggesting fixes
3. **DEPENDENCY PROTECTION**: Never modify dependency files without explicit user verification
4. **TEST PRESERVATION**: Protect existing tests from modification during quality improvements
5. **USER VERIFICATION REQUIRED**: All quality-related code changes require user approval

### Safe Operations (No Approval Required)
- Running quality checks and reporting results
- Providing quality improvement suggestions and recommendations
- Analyzing code quality issues and identifying areas for enhancement
- Reading and validating documentation consistency across files
- Monitoring strategic alignment and reporting misalignment issues

### Protected Operations (Require User Approval)
- Modifying source code for quality improvements or style fixes
- Changing dependency files (requirements.txt, package.json, Cargo.toml, go.mod, etc.)
- Modifying existing tests or test configurations
- Automatically applying code formatting or linting fixes
- Making documentation changes to resolve consistency issues
- Updating dependencies or development tool configurations

## Purpose & Triggers

Quality assurance guidelines for maintaining code quality, documentation consistency, and strategic alignment for [PROJECT_NAME].

### Auto-Trigger Keywords
This rule is automatically loaded when agents detect: `quality, test, lint, dependency, requirement, documentation, validate, check, deploy, security, format, style, coverage`

### Cross-Rule Integration Points
- **@010-cursor_general_rules**: Operates within centralized Rule Integration Framework for quality-aware coordination
- **@011-cursor_project_rules**: Quality standards align with technical implementation requirements and coding standards
- **@013-cursor_riper_rules**: Quality gate triggers integrate into RIPER Review phase validation
- **@022-cursor_git_rules**: Pre-commit validation requires quality checks before all Git operations
- **@030-cursor_task_rules**: Quality validation required before task completion and archival
- **@021-cursor_environment_rules**: Quality gates adapt to environment (stricter in STAGING/PROD, more permissive in DEV)

### Quality Integration Actions
- **Pre-Implementation**: Validate quality gate triggers before making changes (>100 lines, >5 files, new modules, API changes)
- **During Development**: Run quality checks before suggesting modifications to working code
- **Documentation Sync**: Maintain consistency between code implementation and documentation across 2+ files
- **Task Validation**: Ensure task completion includes proper quality validation and testing requirements
- **Strategic Compliance**: Validate changes align with project objectives and technical standards

## Pre-Implementation Quality Gates

Before making changes meeting objective criteria, agents should validate:

### üî¥ MANDATORY Quality Gate Triggers (Objective Criteria)
- **Dependency Changes**: Adding/removing packages in dependency files
- **API Integration Changes**: Modifying API calls, adding new endpoints, changing authentication
- **Major Code Changes**: >100 lines modified across files, >5 files modified in single change
- **New Module Creation**: Adding new directories, creating new major features
- **Environment Changes**: Modifying configuration files, changing environment management
- **User-Facing Features**: Adding new commands/features, changing interfaces, updating help systems

### ‚úÖ Code Quality Foundation
- **Style Standards**: Code follows established style guide for [MAIN_LANGUAGE]
- **Type Safety**: Functions include proper type annotations/declarations
- **Error Handling**: Comprehensive error handling with appropriate logging
- **Security**: No hardcoded secrets, proper input validation, secure practices
- **Performance**: Efficient algorithms, proper resource management, optimized API usage

### ‚úÖ Dependencies & Environment
- **Dependency File Accuracy**: Must match actual imports/requirements in codebase
- **Environment Variables**: Consistent documentation across all configuration files
- **Development Tools**: Quality tools properly configured for [TECH_STACK]
- **Platform Compatibility**: Cross-platform considerations when applicable

## TECHNOLOGY TEMPLATES

### Python Projects
```bash
# Core quality checks
flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
black --check src/
mypy src/ --ignore-missing-imports
bandit -r src/
safety check

# Test coverage
pytest tests/ --cov=src/

# Dependency validation
pip check
```

### JavaScript/TypeScript Projects
```bash
# Core quality checks
npm run lint
npm run type-check
npm run format:check
npm audit

# Test coverage
npm test -- --coverage

# Dependency validation
npm ls
```

### Go Projects
```bash
# Core quality checks
go vet ./...
golint ./...
gofmt -l .
gosec ./...

# Test coverage
go test -race -coverprofile=coverage.out ./...
go tool cover -html=coverage.out

# Dependency validation
go mod verify
go mod tidy
```

### Rust Projects
```bash
# Core quality checks
cargo clippy -- -D warnings
cargo fmt --check
cargo audit

# Test coverage
cargo test
cargo tarpaulin --out Html

# Dependency validation
cargo check
```

## Post-Implementation Validation

### Automated Quality Checks
Replace these commands with your project's quality toolchain:

```bash
# Example for [TECH_STACK] projects
[QUALITY_COMMAND_1]
[QUALITY_COMMAND_2]
[QUALITY_COMMAND_3]

# Project-specific validation script
[PROJECT_SPECIFIC_VALIDATION_SCRIPT]
```

### Documentation Consistency Requirements

**Critical Consistency Points**:
- **API Integration**: Same approach described consistently across README, project rules, deployment guide
- **Project Structure**: Directory listings match actual project organization
- **Environment Management**: Environment stages properly documented and aligned
- **Strategic Features**: Core features properly documented and integrated
- **Task Status**: Reflects actual implementation reality, not outdated plans

**Document Hierarchy**: Working Code ‚Üí Primary Docs (README, dependency files, project rules) ‚Üí Strategic Docs ‚Üí Supporting Docs ‚Üí Development Docs

### Strategic Alignment Validation

**Technical Integration Points**:
- **Platform Features**: Implementation consistent with project capabilities
- **Module Integration**: Changes support cross-module functionality
- **Architecture Alignment**: Implementation follows established patterns
- **Feature Completeness**: User-facing features include proper documentation

**Technical Misalignment Warning Signs**:
- Features breaking established module boundaries
- Implementation not following project coding standards
- Missing integration with core utilities and frameworks
- Changes not reflected in user-facing documentation

## ‚úÖ Task Completion Quality Process

### 1Ô∏è‚É£ Implementation Validation
**Feature works as specified** ‚Üí **Handles edge cases** ‚Üí **Follows project standards** ‚Üí **Includes error handling** ‚Üí **Tests written & passing** ‚Üí **Security addressed**

### 2Ô∏è‚É£ Documentation Sync
**Update dependency files** ‚Üí **Update README.md** ‚Üí **Update project rules** ‚Üí **Update help/docs** ‚Üí **Update deployment guide** ‚Üí **Update configuration**

### 3Ô∏è‚É£ Cross-Document Check
**Check 2+ related docs** ‚Üí **Verify no conflicts** ‚Üí **Ensure API consistency** ‚Üí **Validate environment vars** ‚Üí **Confirm project structure**

### 4Ô∏è‚É£ Task List Accuracy  
**Update @020-task_list to "Ready for Review"** ‚Üí **Add comprehensive summary** ‚Üí **Update related tasks** ‚Üí **Verify descriptions match reality** ‚Üí **Document technical approach**

### 5Ô∏è‚É£ Strategic Compliance
**Support project objectives** ‚Üí **Follow established architecture** ‚Üí **Integration properly documented** ‚Üí **Module integration validated**

## Emergency Consistency Fix Process

1. **Root Cause Analysis**: Identify what changed that caused inconsistency
2. **Impact Assessment**: Determine effect on user experience and objectives  
3. **Source of Truth**: Establish actual current state
4. **Update Documentation**: Work through document hierarchy
5. **Quality Validation**: Run complete quality suite and validation scripts
6. **Cross-Validation**: Check 2+ documents for each change
7. **Process Improvement**: Add preventive measures

## Quality Assurance Commands Reference

### Essential Commands Template
```bash
# Before committing (customize for your project)
[PROJECT_CONSISTENCY_CHECK_COMMAND]
[LINTING_COMMAND]
[FORMATTING_CHECK_COMMAND]
[TEST_COMMAND]
[SECURITY_SCAN_COMMAND]
[DEPENDENCY_CHECK_COMMAND]
```

### Code Quality Standards Template
- **Formatting**: [FORMATTER_TOOL] ([SETTINGS])
- **Linting**: [LINTER_TOOL] ([CONFIGURATION])
- **Type Checking**: [TYPE_CHECKER] ([SETTINGS])
- **Security**: [SECURITY_TOOL]
- **Dependencies**: [DEPENDENCY_TOOL]
- **Testing**: [TEST_FRAMEWORK]

## Integration with Cursor Rules

**Centralized Integration Framework**: See @010-cursor_general_rules ‚Üí "üîó Rule Integration Framework" section for comprehensive integration coordination between all cursor rules.

## Critical Warning Signs

**Immediate Action Required**:
üö® Dependencies in dependency files but not used in code
üö® API approach described differently in different files
üö® Task marked "complete" but functionality not implemented
üö® Environment variables inconsistently documented
üö® Features mentioned in user documentation but not implemented in code

**Technical Implementation Issues**:
üéØ Module imports breaking established architecture patterns
üéØ Missing integration with core utilities and frameworks
üéØ User-facing features lacking proper documentation
üéØ Code changes not following established project standards

## Agent Implementation Guidelines

### Quality Validation Process
- **Proactive Validation**: Run quality checks before suggesting changes
- **Documentation Integrity**: Treat documentation accuracy as equally important as code functionality
- **Strategic Compliance**: Ensure changes align with project objectives
- **Dependency Verification**: Always check dependency file alignment when making changes
- **Implementation Reality**: Document what IS implemented, not what was planned

### Documentation vs Implementation Validation
- **Task List Integration**: When finding features in user docs but not in code, check if corresponding task exists in @020-task_list
- **Missing Task Creation**: If documented feature has no task, suggest creating "Not started" task rather than modifying documentation
- **Task Status Sync**: If task exists but feature isn't implemented, verify task status reflects reality
- **Documentation Scope**: Focus on user-facing documentation rather than internal task management

### User Communication
- **Quality Feedback**: Inform users of quality validation steps being performed
- **Transparency**: Clearly explain quality assurance rationale and benefits
- **Efficiency**: Streamline quality processes to avoid development friction

## EXAMPLE CONFIGURATIONS

### Python Web Application
```bash
# Quality commands
flake8 app/ --max-line-length=88
black --check app/
mypy app/
pytest tests/ --cov=app/
bandit -r app/
safety check

# Dependencies
requirements.txt or pyproject.toml
```

### React/TypeScript Application
```bash
# Quality commands
npm run lint
npm run type-check
npm run test -- --coverage
npm audit
npm run format:check

# Dependencies
package.json and package-lock.json
```

### Go Microservice
```bash
# Quality commands
go vet ./...
golint ./...
go test -race ./...
gosec ./...
go mod verify

# Dependencies
go.mod and go.sum
```




