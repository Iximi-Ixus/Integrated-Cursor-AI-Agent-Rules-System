---
description: 
globs: 
alwaysApply: true
---
# 📋 011-cursor_project_rules - Agent Development Standards

## CUSTOMIZATION GUIDE 🔧

**Essential Placeholders to Replace:**
- `[PROJECT_NAME]` → Your project name (e.g., "MyApp", "WebsiteProject")
- `[MAIN_LANGUAGE]` → Primary language (Python, JavaScript, TypeScript, Go, Rust, etc.)
- `[TECH_STACK]` → Core technologies (React, Django, Express, Spring, etc.)
- `[FRAMEWORK]` → Main framework being used
- `[MIN_VERSION]` → Minimum language version (Python 3.8+, Node 16+, etc.)
- `[PACKAGE_MANAGER]` → Package manager (pip, npm, yarn, cargo, go mod, etc.)

**Quick Start - Copy the relevant template section below and replace placeholders!**

## CRITICAL AGENT RULES - READ FIRST

⚠️ **MANDATORY PROJECT TECHNICAL STANDARDS** ⚠️

1. **NO TECHNICAL STACK CHANGES**: Agents MUST NOT modify core technologies, frameworks, or development stack without explicit user approval
2. **ARCHITECTURE PROTECTION**: Never change module structure, file organization, or project architecture without verification
3. **CODING STANDARDS PRESERVATION**: Protect established coding standards, naming conventions, and development practices
4. **DEPENDENCY SAFETY**: Do not modify technical requirements or external dependencies without user approval
5. **USER VERIFICATION REQUIRED**: All technical stack and architectural changes require user approval

### Safe Development Operations (No Approval Required)
- Using established technical standards for development guidance
- Following coding standards, naming conventions, and file organization patterns
- Implementing features within existing module structure
- Adding code that follows established patterns and requirements

### Protected Technical Operations (Require User Approval)
- Modifying core technical stack
- Changing project architecture or module structure
- Modifying coding standards, naming conventions, or development practices
- Adding or removing external dependencies
- Changing platform requirements or compatibility standards

## Purpose

This rule defines **technical standards and constraints** that agents must follow when working on [PROJECT_NAME].

### Auto-Trigger Keywords
This rule is automatically loaded when agents detect: `[MAIN_LANGUAGE], [FRAMEWORK], [TECH_STACK], api, requirements, dependencies, code, implementation, module, standard, platform, error, logging, security, performance`

### Cross-Rule Integration Points
- **@010-cursor_general_rules**: Provides foundational development standards that inform all other rule applications
- **@032-cursor_quality_rules**: Technical standards define quality baseline for validation processes  
- **@013-cursor_riper_rules**: Execute phase standards ensure all code follows established patterns
- **@022-cursor_git_rules**: Git operations must respect technical constraints and testing requirements
- **@021-cursor_environment_rules**: Environment-specific configurations must align with technical stack requirements

### Project Integration Actions
- **Before Implementation**: Validate compatibility with [MAIN_LANGUAGE] [MIN_VERSION] and [FRAMEWORK]
- **During Development**: Apply coding standards and maintain module structure
- **Quality Validation**: Ensure technical requirements alignment before suggesting commits or deployments
- **Documentation Updates**: Maintain technical documentation consistency with actual implementation
- **Dependency Management**: Monitor and validate dependencies with actual project imports

## 🐍 PYTHON PROJECT TEMPLATE

### Core Technical Stack (Immutable)
```yaml
Language: Python 3.8+
Framework: [Django/Flask/FastAPI]
Package Manager: pip
Testing: pytest
Linting: flake8, pylint
Formatting: black
Type Checking: mypy
Dependencies: requirements.txt
```

### Project Architecture
```
src/
├── [module_name]/     # Main application module
├── tests/             # Test files
├── docs/              # Documentation
└── utils/             # Shared utilities
```

### Coding Standards
- **Formatting**: PEP 8 compliance (use black formatter)
- **Line Length**: 88 characters
- **Naming**: snake_case for functions/variables, CamelCase for classes
- **Type Hints**: Required for all function parameters and return values
- **Docstrings**: Required for all classes and functions

### Quality Commands
```bash
# Testing
pytest
pytest --cov=src

# Linting
flake8 src/
pylint src/

# Formatting
black src/
black --check src/

# Type checking
mypy src/
```

## 🌐 JAVASCRIPT/NODE PROJECT TEMPLATE

### Core Technical Stack (Immutable)
```yaml
Language: JavaScript (Node.js 16+)
Framework: [React/Express/Next.js]
Package Manager: npm/yarn
Testing: Jest/Mocha
Linting: ESLint
Formatting: Prettier
Type Checking: JSDoc (or TypeScript)
Dependencies: package.json
```

### Project Architecture
```
src/
├── components/        # React components (if applicable)
├── pages/            # Page components
├── utils/            # Utility functions
├── api/              # API routes
└── tests/            # Test files
```

### Coding Standards
- **Style**: ESLint + Prettier configuration
- **Naming**: camelCase for functions/variables, PascalCase for components
- **Modules**: ES6 modules (import/export)
- **Documentation**: JSDoc comments for functions

### Quality Commands
```bash
# Testing
npm test
npm run test:coverage

# Linting
npm run lint
npm run lint:fix

# Formatting
npm run format
npm run format:check

# Build
npm run build
```

## 📘 TYPESCRIPT PROJECT TEMPLATE

### Core Technical Stack (Immutable)
```yaml
Language: TypeScript 4.5+
Framework: [React/Angular/Vue/Express]
Package Manager: npm/yarn
Testing: Jest/Vitest
Linting: ESLint (@typescript-eslint)
Formatting: Prettier
Type Checking: TypeScript Compiler
Dependencies: package.json
```

### Project Architecture
```
src/
├── components/        # React/Vue components
├── types/            # Type definitions
├── services/         # API services
├── utils/            # Utility functions
└── __tests__/        # Test files
```

### Coding Standards
- **Type Safety**: Strict TypeScript configuration
- **Naming**: camelCase for functions/variables, PascalCase for types/interfaces
- **Exports**: Prefer named exports over default exports
- **Types**: Define interfaces for all data structures

### Quality Commands
```bash
# Type checking
tsc --noEmit
tsc --build

# Testing
npm test
npm run test:coverage

# Linting
eslint src/
eslint src/ --fix

# Build
npm run build
```

## 🚀 GO PROJECT TEMPLATE

### Core Technical Stack (Immutable)
```yaml
Language: Go 1.19+
Framework: [Gin/Echo/Fiber]
Package Manager: go mod
Testing: go test
Linting: golint, go vet
Formatting: gofmt
Dependencies: go.mod
```

### Project Architecture
```
├── cmd/              # Application entry points
├── internal/         # Private application code
├── pkg/              # Public library code
├── api/              # API definitions
└── tests/            # Test files
```

### Coding Standards
- **Formatting**: Use gofmt for consistent formatting
- **Naming**: camelCase for unexported, PascalCase for exported
- **Error Handling**: Always handle errors explicitly
- **Documentation**: Package and function comments

### Quality Commands
```bash
# Testing
go test ./...
go test -v ./...
go test -cover ./...

# Linting
go vet ./...
golint ./...

# Formatting
gofmt -w .
gofmt -d .

# Build
go build ./...
```

## 🦀 RUST PROJECT TEMPLATE

### Core Technical Stack (Immutable)
```yaml
Language: Rust 1.65+
Framework: [Actix/Warp/Rocket]
Package Manager: cargo
Testing: cargo test
Linting: clippy
Formatting: rustfmt
Dependencies: Cargo.toml
```

### Project Architecture
```
src/
├── main.rs           # Application entry point
├── lib.rs            # Library root
├── modules/          # Feature modules
└── tests/            # Integration tests
```

### Coding Standards
- **Formatting**: Use rustfmt for consistent style
- **Naming**: snake_case for functions/variables, PascalCase for types
- **Safety**: Prefer safe Rust, minimize unsafe blocks
- **Documentation**: Use /// for public API documentation

### Quality Commands
```bash
# Testing
cargo test
cargo test --verbose

# Linting
cargo clippy
cargo clippy -- -D warnings

# Formatting
cargo fmt
cargo fmt --check

# Build
cargo build
cargo build --release
```

## 🔧 GENERAL IMPLEMENTATION REQUIREMENTS

### Code Quality Standards (All Languages)
- **Error Handling**: Comprehensive error handling and logging
- **Security**: Input validation, secure dependencies, vulnerability scanning
- **Performance**: Efficient algorithms, resource management, caching strategies
- **Testing**: Unit tests, integration tests, coverage > 80%
- **Documentation**: Clear README, API docs, inline comments

### Platform Requirements
- **Development Environment**: [Windows/macOS/Linux]
- **CI/CD**: Automated testing and deployment pipelines
- **Environment Variables**: Secure configuration management
- **Logging**: Structured logging with appropriate levels

### Module-Specific Standards

#### Frontend Applications
```yaml
State Management: [Redux/Zustand/Vuex]
Styling: [CSS Modules/Styled Components/Tailwind]
Routing: [React Router/Vue Router/Angular Router]
Build Tool: [Webpack/Vite/Parcel]
```

#### Backend Applications
```yaml
Database: [PostgreSQL/MongoDB/MySQL]
Authentication: [JWT/OAuth/Session]
API Design: [REST/GraphQL/gRPC]
Caching: [Redis/Memcached]
```

#### Full-Stack Applications
```yaml
Frontend: [Framework from above]
Backend: [Framework from above]
Database: [As specified above]
Deployment: [Docker/Kubernetes/Cloud]
```

## 📊 QUALITY ASSURANCE INTEGRATION

### Pre-Development Checklist
- [ ] Verify language version compatibility
- [ ] Check framework version alignment
- [ ] Validate dependency constraints
- [ ] Review architectural patterns

### During Development
- [ ] Follow established coding standards
- [ ] Implement comprehensive error handling
- [ ] Add unit tests for new functionality
- [ ] Update documentation as needed

### Post-Development
- [ ] Run full test suite
- [ ] Perform code quality checks
- [ ] Update project dependencies
- [ ] Validate deployment readiness

## 🎯 CUSTOMIZATION EXAMPLES

### Example 1: React TypeScript Project
```yaml
PROJECT_NAME: "MyWebApp"
MAIN_LANGUAGE: "TypeScript"
TECH_STACK: "React, Node.js, PostgreSQL"
FRAMEWORK: "React 18"
MIN_VERSION: "TypeScript 4.5+"
PACKAGE_MANAGER: "npm"
```

### Example 2: Python FastAPI Project
```yaml
PROJECT_NAME: "APIService"
MAIN_LANGUAGE: "Python"
TECH_STACK: "FastAPI, PostgreSQL, Redis"
FRAMEWORK: "FastAPI"
MIN_VERSION: "Python 3.8+"
PACKAGE_MANAGER: "pip"
```

### Example 3: Go Microservice
```yaml
PROJECT_NAME: "UserService"
MAIN_LANGUAGE: "Go"
TECH_STACK: "Gin, PostgreSQL, Docker"
FRAMEWORK: "Gin"
MIN_VERSION: "Go 1.19+"
PACKAGE_MANAGER: "go mod"
```

## 🔄 INTEGRATION WORKFLOW

1. **Select Template**: Choose the appropriate technology template above
2. **Replace Placeholders**: Update all [PLACEHOLDER] values
3. **Customize Standards**: Adapt coding standards to project needs
4. **Validate Setup**: Ensure all quality commands work
5. **Document Changes**: Update project documentation

**Remember**: This template preserves all cross-rule integration while providing flexibility for any technology stack!
