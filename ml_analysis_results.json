{
  "dt_score": 0.9369078982402237,
  "mean_error": 78.5654688050569,
  "median_error": 55.02905882352934,
  "max_error": 951.5514285714282,
  "implementation": "\ndef calculate_reimbursement_ml(trip_duration_days, miles_traveled, total_receipts_amount):\n    \"\"\"\n    ML-derived reimbursement calculation based on Decision Tree analysis\n    \"\"\"\n    \n    # Feature engineering (matching training features)\n    miles_per_day = miles_traveled / trip_duration_days\n    spending_per_day = total_receipts_amount / trip_duration_days\n    \n    # Key decision features from tree analysis\n    is_sweet_spot_efficiency = 1 if 180 <= miles_per_day <= 220 else 0\n    is_5_day_trip = 1 if trip_duration_days == 5 else 0\n    is_extreme_efficiency = 1 if miles_per_day >= 300 else 0\n    is_sweet_spot_combo = 1 if (trip_duration_days == 5 and miles_per_day >= 180 and spending_per_day < 100) else 0\n    \n    # Implement decision tree logic here\n    # (This would be filled in based on the actual tree structure)\n    \n    # Placeholder - use the most important features identified\n    base_reimbursement = trip_duration_days * 100  # Base per diem\n    \n    # Add efficiency bonuses\n    if is_sweet_spot_efficiency:\n        base_reimbursement *= 1.2\n    elif is_extreme_efficiency:\n        base_reimbursement *= 1.5\n    \n    # Add mileage component\n    mileage_reimbursement = miles_traveled * 0.58\n    \n    # Add receipt component with caps\n    receipt_reimbursement = min(total_receipts_amount, trip_duration_days * 100)\n    \n    total = base_reimbursement + mileage_reimbursement + receipt_reimbursement\n    \n    return round(total, 2)\n"
}